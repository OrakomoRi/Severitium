name: Auto Build and Release

on:
    push:
        branches:
            - main
        paths:
            - "release/severitium.user.js"

permissions:
    contents: write

jobs:
    build-and-release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Extract version from severitium.user.js
              id: extract_version
              run: |
                  version=$(grep -oP '@version\s+\K[\w.+-]+' release/severitium.user.js)
                  echo "VERSION=$version" >> $GITHUB_ENV
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Check if release with this version already exists
              id: check_release
              run: |
                  if gh release view "$VERSION" >/dev/null 2>&1; then
                    echo "Release already exists, skipping."
                    echo "exists=true" >> $GITHUB_OUTPUT
                  else
                    echo "exists=false" >> $GITHUB_OUTPUT
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Stop if release exists
              if: steps.check_release.outputs.exists == 'true'
              run: exit 0

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install minifiers
              run: npm i -g terser csso-cli

            - name: Build release files
              run: |
                  mkdir -p "builds/$VERSION"
                  
                  # Collect and minify JavaScript files
                  # First, collect files from _libs directory
                  find src/_libs -name "*.js" ! -name "*.user.js" ! -name "*.min.js" 2>/dev/null \
                    | sort | xargs -r cat > "builds/$VERSION/script.release.js" || touch "builds/$VERSION/script.release.js"
                  
                  # Then, collect all other files (excluding _Additional and _libs)
                  find src -path "src/_Additional" -prune -o -path "src/_libs" -prune -o -name "*.js" ! -name "*.user.js" ! -name "*.min.js" -print \
                    | sort | xargs -r cat >> "builds/$VERSION/script.release.js"
                  
                  terser "builds/$VERSION/script.release.js" -c -m -o "builds/$VERSION/script.release.min.js"
                  rm -f "builds/$VERSION/script.release.js"
                  
                  # Collect and minify CSS files
                  # First, collect files from _libs directory
                  find src/_libs -name "*.css" ! -name "*.user.css" ! -name "*.min.css" 2>/dev/null \
                    | sort | xargs -r cat > "builds/$VERSION/style.release.css" || touch "builds/$VERSION/style.release.css"
                  
                  # Then, collect all other files (excluding _Additional and _libs)
                  find src -path "src/_Additional" -prune -o -path "src/_libs" -prune -o -name "*.css" ! -name "*.user.css" ! -name "*.min.css" -print \
                    | sort | xargs -r cat >> "builds/$VERSION/style.release.css"
                  
                  csso "builds/$VERSION/style.release.css" -o "builds/$VERSION/style.release.min.css"
                  rm -f "builds/$VERSION/style.release.css"
                  
                  # Extract and build variables separately
                  echo "Extracting Variables.css..."
                  if [ -f "src/Variables/Variables.css" ]; then
                    cp "src/Variables/Variables.css" "builds/$VERSION/variables.css"
                    csso "builds/$VERSION/variables.css" -o "builds/$VERSION/variables.min.css"
                    echo "Variables.css extracted and minified successfully"
                  else
                    echo "Warning: Variables.css not found"
                  fi
                  
                  # Create variables.json for easier parsing
                  echo "Creating variables.json..."
                  if [ -f "builds/$VERSION/variables.css" ]; then
                    node -e "
                      const fs = require('fs');
                      const css = fs.readFileSync('builds/$VERSION/variables.css', 'utf8');
                      const variables = {};
                      
                      // Extract variables from :root block
                      const rootMatch = css.match(/:root\s*{([^}]*)}/);
                      if (rootMatch) {
                        const rootContent = rootMatch[1];
                        const varMatches = rootContent.match(/--[^:;]+:[^;]+;/g);
                        
                        if (varMatches) {
                          varMatches.forEach(match => {
                            const [property, value] = match.split(':').map(s => s.trim());
                            if (property && value) {
                              variables[property] = value.replace(';', '').trim();
                            }
                          });
                        }
                      }
                      
                      const output = {
                        version: '$VERSION',
                        timestamp: new Date().toISOString(),
                        variables: variables
                      };
                      
                      fs.writeFileSync('builds/$VERSION/variables.json', JSON.stringify(output, null, 2));
                      console.log('Variables extracted to JSON:', Object.keys(variables).length, 'variables');
                    " || echo "Failed to create variables.json"
                  fi
  
            - name: Update versions.json
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  
                  git fetch origin builds
                  git switch --create builds-temp origin/builds || git switch builds-temp
                  
                  mkdir -p versions
                  
                  if [ ! -f versions/versions.json ]; then
                    echo "[]" > versions/versions.json
                  fi
                  
                  git checkout main
                  COMMIT_HASH=$(git rev-parse HEAD)
                  COMMIT_DATE=$(git log -1 --format=%ad --date=short)
                  COMMIT_MESSAGE=$(git log -1 --format=%s)
                  
                  git checkout builds-temp
                  
                  if ! grep -q "\"version\": \"$VERSION\"" versions/versions.json 2>/dev/null; then
                    /usr/bin/jq --arg version "$VERSION" \
                       --arg date "$COMMIT_DATE" \
                       --arg comment "$COMMIT_MESSAGE" \
                       --arg hash "$COMMIT_HASH" \
                       '. += [{"version": $version, "date": $date, "comment": $comment, "hash": $hash}]' \
                       versions/versions.json > versions/versions_tmp.json
                    mv versions/versions_tmp.json versions/versions.json
                    
                    git add versions/versions.json
                    git commit -m "Auto-update versions.json: add $VERSION" || echo "No changes to commit"
                  fi

            - name: Push to builds branch
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

                  git switch --create builds origin/builds || git switch builds

                  cp -r "builds/$VERSION" "./"
                  
                  if [ -f versions/versions.json ]; then
                    git checkout builds-temp -- versions/versions.json
                  fi

                  git add "$VERSION" versions/versions.json

                  echo -e "$VERSION\nbuild: release artifacts" > commit-msg.txt
                  git commit -F commit-msg.txt
                  git push origin builds
                  
                  git branch -D builds-temp || true

            - name: Create GitHub release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ env.VERSION }}
                  name: ${{ env.VERSION }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
